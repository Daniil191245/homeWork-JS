Подія  – це сигнал від браузера про те, що щось сталося. Події використовуються для реакції на дії користувача і виконання коду. Події стають в чергу і обробляються в порядку надходження, асинхронно, незалежно.

Існує багато видів подій, розглянемо деякі з них:
click — відбувається, коли клацнути на елемент лівою кнопкою миші
submit — відвідувач відправив форму
focus — відвідувач фокусується на елементі, наприклад натискає на input
keydown — відвідувач натискає клавішу

Слухачі подій
Для того щоб елемент реагував на дії користувача, на нього необхідно повісити слухача (обробник) події. Тобто функцію, яка спрацює як тільки подія відбулася. Саме завдяки слухачам подій, скрипт може реагувати на дії користувача.
Методи elem.addEventListener () і elem.removeEventListener () це сучасний спосіб призначити або видалити обробник, при цьому можна використовувати скільки завгодно оброблювачів на одному типі події.

Розгляд слухачів подій:
Метод elem.addEventListener()
Додає слухача події на елемент.
element.addEventListener(event, handler[, phase])
event — ім'я події, рядок, наприклад click
handler — посилання на функцію, яку треба поставити оброблювачем
phase — необов'язковий аргумент, фаза, на якій обробник повинен спрацювати. Вказується вкрай рідко.

Метод elem.removeEventListener()
Видаляє слухача. Аргументи ті ж що у addEventListener.
element.removeEventListener(event, handler[, phase])
Copy
Для видалення потрібно передати посилання саме на ту функцію-обробник, яка була призначена в addEventListener. Тому для callback використовують окрему функцію і передають її на ім'я.

Об'єкт події
Щоб обробити подію, недостатньо знати про те, що це клік або натискання клавіші. Можуть знадобитися деталі: поточне значення текстового поля, елемент на якому відбулася подія, вбудовані методи і інше. Об'єкт події містить цінну інформацію про деталі події і автоматично передається першим аргументом в обробник події.
Документація об'єкта події
Деякі властивості об'єкта події:
event.type — тип події
event.target — елемент, на якому відбулася подія
event.currentTarget — елемент, на якому спрацював обробник

Дії браузера за замовчуванням
Деякі події автоматично викликають дію браузера вбудованого по замовчуванню як реакція на певний тип події: перехід по посиланню, відправка форми і т. п. Як правило їх можна, і часто потрібно, скасувати.
Наприклад:
Клік по посиланню ініціює перехід на новий URL вказаний в href посилання.
Відправлення форми — перезавантаження сторінки.
Для скасування дії браузера за замовчуванням, на об'єкті події є стандартний метод.
event.preventDefault()

Подія submit
Виникає при відправці форми. Його застосовують для валідації (перевірки) форми перед відправкою. Щоб відправити форму, у відвідувача є два способи:
Натиснути кнопку з type =" submit "
Натиснути кнопку Enter, перебуваючи в якомусь полі форми
Який би спосіб не вибрав відвідувач - буде згенеровано подія submit. В обробнику цієї події можна перевірити дані, і виконати дії по результатах перевірки.

Події елементів форм
Фокусування
Елемент отримує фокус при натисканні на ньому мишкою, клавіші 'Tab` або вибравши на планшеті. Момент отримання фокусу і втрати дуже важливий, при отриманні фокусу ми можемо довантажити дані для автодоповнення, почати відстежувати зміни. При втраті фокусу — перевірити введені дані.
При фокусуванні на елемент відбувається подія focus, а коли фокус зникає, наприклад відвідувач клацає в іншому місці екрана, відбувається подія blur.
За замовчуванням багато елементів не можуть отримати фокус. Наприклад, якщо клікнути по Div, то фокусування на ньому не відбудеться. До речі, фокус може бути тільки на одному елементі в одиницю часу, і поточний елемент, на якому фокус, доступний як document.activeElement.
Активувати або скасувати фокус можна програмно, викликавши в коді однойменні методи elem.focus () і elem.blur () в елемента.

Подія change
Відбувається після закінчення зміни елемента форми, коли зміна зафіксована. Для input: text або textarea, подія відбудеться не при кожному введенні, а при втраті фокусу, що не завжди зручно.
Наприклад, поки ви набираєте щось у текстовому полі - події немає. Але як тільки фокус пропав, відбудеться подія change. Для інших же елементів, наприклад Select, input: checkbox і input: radio, воно спрацьовує відразу при виборі значення.

Подія input
Спрацьовує тільки на текстових елементах, input: text і textarea, при зміні значення елемента. Чи не чекає втрати фокусу, на відміну від change.
В сучасних браузерах input — найголовніша подія для роботи з текстовим елементом форми. Саме його, а не keydown або keypress, слід використовувати.

Підсумок:
Подія — це сигнал від браузера про те, що щось сталося.
Події використовуються для реакції на дії користувача і виконання коду.
Події стають в чергу і обробляються в порядку надходження, асинхронно, незалежно.
Існує багато видів подій.
click — відбувається, коли клацнути на елемент лівою кнопкою миші
submit — відвідувач відправив форму
focus — відвідувач фокусується на елементі, наприклад натискає на input
Методи elem.addEventListener () і elem.removeEventListener () це сучасний спосіб призначити або видалити обробник, при цьому можна використовувати скільки завгодно оброблювачів на одному типі події.
Об'єкт події містить цінну інформацію про деталі події і автоматично передається першим аргументом в обробник події.
Для скасування дії браузера за замовчуванням, на об'єкті події є стандартний метод event.preventDefault()